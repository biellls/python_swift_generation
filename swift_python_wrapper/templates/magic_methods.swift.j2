{% for bmm in magic_methods.binary_magic_methods %}
extension {{ swift_object_name }}{% if bmm.swift_protocol_name %}: {{ bmm.swift_protocol_name }}{% endif %} {
    {% for rhs_type, return_type in bmm.right_classes %}
    public static func {{ bmm.symbol }}(lhs: {{ swift_object_name }}, rhs: {{ rhs_type | convert_to_swift_type }}) -> {{ return_type | convert_to_swift_type }} {
        return  {{ return_type | convert_to_swift_type }}(self.wrappedClass[dynamicMember: "{{ bmm.python_magic_method }}"](lhs.wrappedInstance, rhs.wrappedInstance))
    }
    {% endfor %}
}

{% endfor %}
{% for umm in magic_methods.unary_magic_methods %}
extension {{ swift_object_name }}{% if umm.swift_protocol_name %}: {{ umm.swift_protocol_name }}{% endif %} {
    public static prefix func {{ umm.symbol }}(x: {{ swift_object_name }}) -> {{ swift_object_name }} {
        return  {{ swift_object_name }}(self.wrappedClass[dynamicMember: "{{ umm.python_magic_method }}"](x.wrappedInstance))
    }
}

{% endfor %}
{% if magic_methods.len__ %}
extension {{ swift_object_name }} {
    var size: Int { return Int({{ swift_object_name }}.wrappedClass[dynamicMember: "len"](self.wrappedInstance))! }
}

{% endif %}
{% if magic_methods.getitem__ %}
extension {{ swift_object_name }} {
    subscript(index: {{ magic_methods.getitem__.index_type | convert_to_swift_type }}) -> {{ magic_methods.getitem__.return_type | convert_to_swift_type }} {
        get {
            return {{ magic_methods.getitem__.return_type | convert_to_swift_type }}({{ swift_object_name }}.wrappedClass.__get_item__(index.wrappedInstance))
        }
        {% if magic_methods.setitem__ %}
        set(newValue) {
            {{ swift_object_name }}.wrappedClass.__set_item__(index.wrappedInstance, newValue.wrappedInstance)
        }
        {% endif %}
    }
}

{% endif %}
{% for ebl in magic_methods.expressible_by_literals %}
extension {{ swift_object_name }}: {{ ebl.protocol_name }} {
  init({{ ebl.label_name }} value: {{ ebl.literal_type }}) {
    self.wrappedInstance = {{ swift_object_name }}.wrappedClass(value)
  }
}

{% endfor %}
{% if magic_methods.ExpressibleByArrayLiteral %}
extension {{ swift_object_name }}: ExpressibleByArrayLiteral {
  init(arrayLiteral: Element...) {
        self.wrappedInstance = Python.list()
        for element in arrayLiteral {
            self.wrappedInstance.append(element.wrappedInstance)
        }
    }
}
{% endif %}

