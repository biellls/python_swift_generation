{% macro function_args_definition(args) %}{% for arg in args %}{{ arg.name }}: {{ arg.mapped_type }}{% if arg.has_default_value %} = {{ arg.mapped_default_value }}{% endif %}{{ ", " if not loop.last }}{% endfor %}{% endmacro %}
{% macro function_positional_args_definition(args) %}{% for arg in args %}_ {{ arg.name }}: {{ arg.mapped_type }}{% if arg.has_default_value %} = {{ arg.mapped_default_value }}{% endif %}{{ ", " if not loop.last }}{% endfor %}{% endmacro %}
{% macro function_named_args_call(args) %}{% for arg in args %}{{ arg.name }}: {{ arg.name }}.wrappedInstance{{ ", " if not loop.last }}{% endfor %}{% endmacro %}
{% macro function_positional_args_call(args) %}{% for arg in args %}{{ arg.name }}.wrappedInstance{{ ", " if not loop.last }}{% endfor %}{% endmacro %}
{% macro init_named_args_call(args) %}{% for arg in args %}{{ arg.name }}: {{ arg.name }}.wrappedInstance{{ ", " if not loop.last }}{% endfor %}{% endmacro %}
{% macro wrapped_return(method) %}let val = {{ 'wrappedClass' if method.static_method else 'wrappedInstance' }}[dynamicMember: "{{ method.name }}"]({{ function_named_args_call(method.args) if not positional_args else function_positional_args_call(method.args) }})
{% if method.return_type and method.mapped_return_type.endswith('?') %}
        if val == Python.None { return nil } else { return {{ method.mapped_return_type.replace('?', '') }}(val) }
{%- elif method.return_type %}
        return {{ method.wrapped_return }}{{ method.return_type|force_unwrap }}
{% else %}
        return val
{%- endif %}
{% endmacro %}

struct {{ swift_object_name }}{{ rendered_type_vars }}: TPobject, CustomStringConvertible {
    {% if magic_methods.ExpressibleByArrayLiteral %}
    typealias Element = {{ type_vars[0].__name__ }}
    {% elif magic_methods.Sequence %}
    typealias Element = {{ swift_object_name }}
    {% endif %}
    {% if self.generic is none %}
    static let wrappedClass = Python.import("{{ python_module_name }}").{{ object_name|lower if python_module_name == "builtins" else object_name }}
    {% else %}
    static var wrappedClass: PythonObject { Python.import("{{ python_module_name }}").{{ object_name|lower if python_module_name == "builtins" else object_name }} }
    {% endif %}
    let wrappedInstance: PythonObject

    {% for static_var in static_vars %}
    static var {{ static_var.name }}: {{ static_var.mapped_type }} { return {{ static_var.wrapped_return_static }}{{ static_var.type|force_unwrap }} }
    {% endfor %}
    {% for instance_var in instance_vars %}
    var {{ instance_var.name }}: {{ instance_var.mapped_type }} { return {{ instance_var.wrapped_return }}{{ instance_var.type|force_unwrap }} }
    {% endfor %}

    init(_ po: PythonObject) {
        self.wrappedInstance = po
    }

    {% for init_args in init_params %}
    init({{ function_args_definition(init_args) }}) {
        self.wrappedInstance = {{ swift_object_name }}.wrappedClass({{ init_named_args_call(init_args) }})
    }

    {% endfor %}
    {% for method in methods %}
    {% if not method.return_type %}
    @discardableResult
    {% endif %}
    {% if method.static_method %}
    static func {{ method.name }}{{ method.render_type_vars() }}({{ function_args_definition(method.args) if not positional_args else function_positional_args_definition(method.args) }}) -> {% if method.return_type %}{{ method.mapped_return_type }}{% else %}PythonObject{% endif %} {
    {% else %}
    func {{ method.name }}{{ method.render_type_vars() }}({{ function_args_definition(method.args) if not positional_args else function_positional_args_definition(method.args) }}) -> {% if method.return_type %}{{ method.mapped_return_type }}{% else %}PythonObject{% endif %} {
    {% endif %}
        {{ wrapped_return(method) }}
    }

    {% endfor %}
    var description: String { return self.wrappedInstance.description }
}

{{ rendered_magic_methods }}