{% macro function_args_definition(args) %}{% for arg in args %}{{ arg.name }}: {{ arg.mapped_type }}{% if arg.has_default_value %} = {{ arg.default_value }}{% endif %}{{ ", " if not loop.last }}{% endfor %}{% endmacro %}
{% macro function_named_args_call(args) %}{% for arg in args %}{{ arg.name }}: {{ arg.name }}.wrappedInstance{{ ", " if not loop.last }}{% endfor %}{% endmacro %}
{% macro init_named_args_call(args) %}{% for arg in args %}{{ arg.name }}: {{ arg.name }}.wrappedInstance{{ ", " if not loop.last }}{% endfor %}{% endmacro %}
{% macro wrapped_return(method) %}let val = {{ 'wrappedClass' if method.static_method else 'wrappedInstance' }}[dynamicMember: "{{ method.name }}"]({{ function_named_args_call(method.args) }})
{% if method.return_type and method.mapped_return_type.endswith('?') %}
        if val == Python.None { return nil } else { return {{ method.mapped_return_type.replace('?', '') }}(val) }
{%- elif method.return_type %}
        return {{ method.mapped_return_type }}(val)
{% else %}
        return val
{%- endif %}
{% endmacro %}

class {{ swift_object_name }} {
    static let wrappedClass = Python.import("{{ module }}").{{object_name}}
    let wrappedInstance: PythonObject

    {% for static_var in static_vars %}
    static var {{ static_var.name }}: {{ static_var.mapped_type }} { return {{ static_var.mapped_type }}(wrappedClass[dynamicMember: "{{ static_var.name }}"]) }
    {% endfor %}
    {% for instance_var in instance_vars %}
    var {{ instance_var.name }}: {{ instance_var.mapped_type }} { return {{ instance_var.mapped_type }}(wrappedInstance[dynamicMember: "{{ instance_var.name }}"]) }
    {% endfor %}

    init(_ po: PythonObject) {
        self.wrappedInstance = po
    }

    // TODO: Add default values
    init({{ function_args_definition(init_params) }}) {
        self.wrappedInstance = {{ swift_object_name }}.wrappedClass({{ init_named_args_call(init_params) }})
    }

    // TODO: Add classmethods
    {% for method in methods %}
    {% if not method.return_type %}
    @discardableResult
    {% endif %}
    {% if method.static_method %}
    static func {{ method.name }}({{ function_args_definition(method.args) }}) -> {% if method.return_type %}{{ method.mapped_return_type }}{% else %}PythonObject{% endif %} {
    {% else %}
    func {{ method.name }}({{ function_args_definition(method.args) }}) -> {% if method.return_type %}{{ method.mapped_return_type }}{% else %}PythonObject{% endif %} {
    {% endif %}
        {{ wrapped_return(method) }}
    }

    {% endfor %}
}

{{ rendered_magic_methods }}
